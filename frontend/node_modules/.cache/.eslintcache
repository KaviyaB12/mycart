[{"C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\index.js":"1","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\App.js":"2","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\store.js":"3","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\user\\Login.js":"4","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\Home.js":"5","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\user\\Profile.js":"6","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\user\\UpdateProfile.js":"7","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\user\\UpdatePassword.js":"8","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\user\\Register.js":"9","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\user\\ForgotPassword.js":"10","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\user\\ResetPassword.js":"11","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\layouts\\Header.js":"12","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\product\\ProductSearch.js":"13","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\product\\ProductDetail.js":"14","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\layouts\\Footer.js":"15","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\route\\ProtectedRoute.js":"16","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\actions\\userActions.js":"17","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\cart\\Shipping.js":"18","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\cart\\Cart.js":"19","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\cart\\ConfirmOrder.js":"20","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\order\\UserOrders.js":"21","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\cart\\Payment.js":"22","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\cart\\OrderSuccess.js":"23","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\order\\OrderDetail.js":"24","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\admin\\Dashboard.js":"25","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\admin\\NewProduct.js":"26","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\admin\\ProductList.js":"27","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\admin\\UpdateProduct.js":"28","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\admin\\UserList.js":"29","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\admin\\UpdateOrder.js":"30","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\admin\\OrderList.js":"31","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\admin\\UpdateUser.js":"32","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\admin\\ReviewList.js":"33","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\slices\\productSlice.js":"34","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\slices\\productsSlice.js":"35","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\slices\\cartSlice.js":"36","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\slices\\authSlice.js":"37","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\slices\\orderSlice.js":"38","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\slices\\userSlice.js":"39","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\layouts\\MetaData.js":"40","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\actions\\productActions.js":"41","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\product\\Product.js":"42","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\layouts\\Loader.js":"43","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\actions\\cartActions.js":"44","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\layouts\\Search.js":"45","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\product\\ProductReview.js":"46","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\cart\\CheckoutStep.js":"47","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\actions\\orderActions.js":"48","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\admin\\Sidebar.js":"49"},{"size":351,"mtime":1735623863696,"results":"50","hashOfConfig":"51"},{"size":5676,"mtime":1735623863643,"results":"52","hashOfConfig":"51"},{"size":710,"mtime":1735623863751,"results":"53","hashOfConfig":"51"},{"size":3074,"mtime":1735623866060,"results":"54","hashOfConfig":"51"},{"size":2428,"mtime":1735623864080,"results":"55","hashOfConfig":"51"},{"size":1331,"mtime":1735623866115,"results":"56","hashOfConfig":"51"},{"size":4526,"mtime":1735623866396,"results":"57","hashOfConfig":"51"},{"size":2705,"mtime":1735623866335,"results":"58","hashOfConfig":"51"},{"size":4585,"mtime":1735623866173,"results":"59","hashOfConfig":"51"},{"size":2096,"mtime":1735623866000,"results":"60","hashOfConfig":"51"},{"size":2949,"mtime":1735623866274,"results":"61","hashOfConfig":"51"},{"size":2420,"mtime":1735626495480,"results":"62","hashOfConfig":"51"},{"size":8118,"mtime":1735623865865,"results":"63","hashOfConfig":"51"},{"size":8020,"mtime":1735623865743,"results":"64","hashOfConfig":"51"},{"size":234,"mtime":1735626436354,"results":"65","hashOfConfig":"51"},{"size":581,"mtime":1735623865926,"results":"66","hashOfConfig":"51"},{"size":5397,"mtime":1735623864010,"results":"67","hashOfConfig":"51"},{"size":6098,"mtime":1735623865089,"results":"68","hashOfConfig":"51"},{"size":4454,"mtime":1735623864774,"results":"69","hashOfConfig":"51"},{"size":4010,"mtime":1735623864890,"results":"70","hashOfConfig":"51"},{"size":2382,"mtime":1735623865612,"results":"71","hashOfConfig":"51"},{"size":5654,"mtime":1735623865021,"results":"72","hashOfConfig":"51"},{"size":459,"mtime":1735623864952,"results":"73","hashOfConfig":"51"},{"size":3465,"mtime":1735623865496,"results":"74","hashOfConfig":"51"},{"size":4885,"mtime":1735623864147,"results":"75","hashOfConfig":"51"},{"size":8632,"mtime":1735623864209,"results":"76","hashOfConfig":"51"},{"size":3674,"mtime":1735623864324,"results":"77","hashOfConfig":"51"},{"size":9705,"mtime":1735623864577,"results":"78","hashOfConfig":"51"},{"size":3465,"mtime":1735623864693,"results":"79","hashOfConfig":"51"},{"size":5982,"mtime":1735623864517,"results":"80","hashOfConfig":"51"},{"size":3679,"mtime":1735623864266,"results":"81","hashOfConfig":"51"},{"size":4295,"mtime":1735623864638,"results":"82","hashOfConfig":"51"},{"size":4410,"mtime":1735623864383,"results":"83","hashOfConfig":"51"},{"size":6654,"mtime":1735623866636,"results":"84","hashOfConfig":"51"},{"size":1558,"mtime":1735623866691,"results":"85","hashOfConfig":"51"},{"size":3068,"mtime":1735623866525,"results":"86","hashOfConfig":"51"},{"size":5283,"mtime":1735623866468,"results":"87","hashOfConfig":"51"},{"size":4466,"mtime":1735623866580,"results":"88","hashOfConfig":"51"},{"size":3126,"mtime":1735623866745,"results":"89","hashOfConfig":"51"},{"size":191,"mtime":1735626524129,"results":"90","hashOfConfig":"51"},{"size":4346,"mtime":1735623863950,"results":"91","hashOfConfig":"51"},{"size":1225,"mtime":1735623865682,"results":"92","hashOfConfig":"51"},{"size":94,"mtime":1735623865294,"results":"93","hashOfConfig":"51"},{"size":595,"mtime":1735623863825,"results":"94","hashOfConfig":"51"},{"size":1216,"mtime":1735623865423,"results":"95","hashOfConfig":"51"},{"size":692,"mtime":1735623865798,"results":"96","hashOfConfig":"51"},{"size":1830,"mtime":1735623864829,"results":"97","hashOfConfig":"51"},{"size":2206,"mtime":1735623863884,"results":"98","hashOfConfig":"51"},{"size":1484,"mtime":1735623864451,"results":"99","hashOfConfig":"51"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"yxif70",{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160"},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164"},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168"},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172"},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179"},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183"},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187"},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191"},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195"},{"filePath":"196","messages":"197","suppressedMessages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202"},{"filePath":"203","messages":"204","suppressedMessages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209"},{"filePath":"210","messages":"211","suppressedMessages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213"},{"filePath":"214","messages":"215","suppressedMessages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217"},{"filePath":"218","messages":"219","suppressedMessages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"221","messages":"222","suppressedMessages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224"},{"filePath":"225","messages":"226","suppressedMessages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","suppressedMessages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"231","messages":"232","suppressedMessages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","suppressedMessages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","suppressedMessages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","suppressedMessages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"243","messages":"244","suppressedMessages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"246","messages":"247","suppressedMessages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","suppressedMessages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"252","messages":"253","suppressedMessages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"255","messages":"256","suppressedMessages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"258","messages":"259","suppressedMessages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","suppressedMessages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\index.js",[],[],"C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\App.js",[],[],"C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\store.js",[],[],"C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\user\\Login.js",["264"],[],"import {Fragment, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { clearAuthError, login } from '../../actions/userActions';\nimport MetaData from '../layouts/MetaData';\nimport { toast } from 'react-toastify';\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\n export default function Login() {\n    const [email, setEmail] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    const location = useLocation();\n\n    const { loading, error, isAuthenticated } = useSelector(state => state.authState)\n    const redirect = location.search?'/'+location.search.split('=')[1]:'/';\n\n    const  submitHandler = (e) => {\n        e.preventDefault();\n        dispatch(login(email, password))\n    }\n\n    useEffect(() => {\n        if(isAuthenticated) {\n            navigate(redirect)\n        }\n\n        if(error)  {\n            toast(error, {\n                position: toast.POSITION.BOTTOM_CENTER,\n                type: 'error',\n                onOpen: ()=> { dispatch(clearAuthError) }\n            })\n            return\n        }\n    },[error, isAuthenticated, dispatch, navigate])\n\n    return (\n        <Fragment>\n            <MetaData title={`Login`} />\n            <div className=\"row wrapper\"> \n                <div className=\"col-10 col-lg-5\">\n                    <form onSubmit={submitHandler} className=\"shadow-lg\">\n                        <h1 className=\"mb-3\">Login</h1>\n                        <div className=\"form-group\">\n                        <label htmlFor=\"email_field\">Email</label>\n                        <input\n                            type=\"email\"\n                            id=\"email_field\"\n                            className=\"form-control\"\n                            value={email}\n                            onChange={e =>setEmail(e.target.value)}\n                        />\n                        </div>\n            \n                        <div className=\"form-group\">\n                        <label htmlFor=\"password_field\">Password</label>\n                        <input\n                            type=\"password\"\n                            id=\"password_field\"\n                            className=\"form-control\"\n                            value={password}\n                            onChange={e =>setPassword(e.target.value)}\n                        />\n                        </div>\n\n                        <Link to=\"/password/forgot\" className=\"float-right mb-4\">Forgot Password?</Link>\n            \n                        <button\n                        id=\"login_button\"\n                        type=\"submit\"\n                        className=\"btn btn-block py-3\"\n                        disabled={loading}\n                        >\n                        LOGIN\n                        </button>\n\n                        <Link to=\"/register\" className=\"float-right mt-3\">New User?</Link>\n                    </form>\n                </div>\n            </div>\n        </Fragment>\n    )\n}","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\Home.js",[],[],"C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\user\\Profile.js",[],[],"C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\user\\UpdateProfile.js",[],[],"C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\user\\UpdatePassword.js",[],[],"C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\user\\Register.js",[],[],"C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\user\\ForgotPassword.js",[],[],"C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\user\\ResetPassword.js",[],[],"C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\layouts\\Header.js",["265"],[],"import React from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport Search from './Search';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {DropdownButton, Dropdown, Image} from 'react-bootstrap';\nimport { logout } from '../../actions/userActions';\n\n\nexport default function Header () {\n    const { isAuthenticated, user } = useSelector(state => state.authState);\n    const { items:cartItems } = useSelector(state => state.cartState)\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    const logoutHandler = () => {\n      dispatch(logout);\n    }\n\n\n    return (\n    <nav className=\"navbar row\">\n        <div className=\"col-12 col-md-3\">\n          <div className=\"navbar-brand\">\n            <Link to=\"/\">\n              <img width=\"150px\" alt='cart Logo' src=\"/images/cart.jpg\" />\n            </Link>\n            </div>\n        </div>\n  \n        <div className=\"col-12 col-md-6 mt-2 mt-md-0\">\n           <Search/>\n        </div>\n  \n        <div className=\"col-12 col-md-3 mt-4 mt-md-0 text-center\">\n          { isAuthenticated ? \n            (\n              <Dropdown className='d-inline' >\n                  <Dropdown.Toggle variant='default text-white pr-5' id='dropdown-basic'>\n                    <figure className='avatar avatar-nav'>\n                      <Image width=\"50px\" src={user.avatar??'./images/default_avatar.png'}  />\n                    </figure>\n                    <span>{user.name}</span>\n                  </Dropdown.Toggle>\n                  <Dropdown.Menu>\n                      { user.role === 'admin' && <Dropdown.Item onClick={() => {navigate('admin/dashboard')}} className='text-dark'>Dashboard</Dropdown.Item> }\n                      <Dropdown.Item onClick={() => {navigate('/myprofile')}} className='text-dark'>Profile</Dropdown.Item>\n                      <Dropdown.Item onClick={() => {navigate('/orders')}} className='text-dark'>Orders</Dropdown.Item>\n                      <Dropdown.Item onClick={logoutHandler} className='text-danger'>Logout</Dropdown.Item>\n                  </Dropdown.Menu>\n              </Dropdown>\n            )\n          \n          :\n            <Link to=\"/login\"  className=\"btn\" id=\"login_btn\">Login</Link>\n          }\n          <Link to=\"/cart\"><span id=\"cart\" className=\"ml-3\">Cart</span></Link>\n          <span className=\"ml-1\" id=\"cart_count\">{cartItems.length}</span>\n        </div>\n    </nav>\n    )\n}","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\product\\ProductSearch.js",[],[],"C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\product\\ProductDetail.js",["266","267","268","269"],[],"import { Fragment, useEffect, useState } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useParams } from \"react-router-dom\";\nimport { createReview, getProduct } from \"../../actions/productActions\"\nimport Loader from '../layouts/Loader';\nimport { Carousel } from 'react-bootstrap';\nimport MetaData from \"../layouts/MetaData\";\nimport { addCartItem } from \"../../actions/cartActions\";\nimport {clearReviewSubmitted, clearError, clearProduct} from '../../slices/productSlice';\nimport {Modal} from 'react-bootstrap';\nimport { toast } from \"react-toastify\";\nimport ProductReview from \"./ProductReview\";\n\n\nexport default function ProductDetail () {\n    const { loading, product = {}, isReviewSubmitted, error} = useSelector((state)=>state.productState);\n    const { user } = useSelector(state => state.authState);\n    const dispatch = useDispatch();\n    const { id } = useParams()\n    const [quantity, setQuantity] = useState(1);\n\n    const increaseQty = () => {\n        const count = document.querySelector('.count')\n        if(product.stock ==0 ||  count.valueAsNumber >= product.stock) return;\n        const qty = count.valueAsNumber + 1;\n        setQuantity(qty);\n    }\n    const decreaseQty = () => {\n        const count = document.querySelector('.count')\n        if(count.valueAsNumber == 1 ) return;\n        const qty = count.valueAsNumber - 1;\n        setQuantity(qty);\n    }\n\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n    const [rating, setRating] = useState(1);\n    const [comment, setComment] = useState(\"\");\n\n    const reviewHandler = () => {\n        const formData = new FormData();\n        formData.append('rating', rating);\n        formData.append('comment', comment);\n        formData.append('productId', id);\n        dispatch(createReview(formData))\n\n    }\n\n    useEffect(()=>{\n        if(isReviewSubmitted) {\n            handleClose()\n            toast('Review Submitted successfully',{\n                type: 'success',\n                position: toast.POSITION.BOTTOM_CENTER,\n                onOpen: () => dispatch(clearReviewSubmitted())\n            })\n            \n        }\n        if(error)  {\n            toast(error, {\n                position: toast.POSITION.BOTTOM_CENTER,\n                type: 'error',\n                onOpen: ()=> { dispatch(clearError()) }\n            })\n            return\n        }\n        if(!product._id || isReviewSubmitted) {\n            dispatch(getProduct(id))\n        }\n\n        return () => {\n            dispatch(clearProduct())\n        }\n        \n\n    },[dispatch,id,isReviewSubmitted, error])\n\n\n\n    return (\n        <Fragment>\n            {loading? <Loader/>:\n            <Fragment>\n                <MetaData title={product.name} />\n                <div className=\"row f-flex justify-content-around\">\n                    <div className=\"col-12 col-lg-5 img-fluid\" id=\"product_image\">\n                        <Carousel pause=\"hover\">\n                            {product.images && product.images.length > 0 && product.images.map(image =>\n                                <Carousel.Item key={image._id}>\n                                    <img className=\"d-block w-100\"  src={image.image} alt={product.name} height=\"500\" width=\"500\" />\n                                </Carousel.Item>\n                            )}\n                        </Carousel>\n                    </div>\n\n                    <div className=\"col-12 col-lg-5 mt-5\">\n                    <h3>{product.name}</h3>\n                    <p id=\"product_id\">Product # {product._id}</p>\n\n                    <hr/>\n\n                    <div className=\"rating-outer\">\n                        <div className=\"rating-inner\" style={{width: `${product.ratings/ 5 * 100}%` }}></div>\n                    </div>\n                    <span id=\"no_of_reviews\">({product.numOfReviews} Reviews)</span>\n\n                    <hr/>\n\n                    <p id=\"product_price\">${product.price}</p>\n                    <div className=\"stockCounter d-inline\">\n                        <span className=\"btn btn-danger minus\" onClick={decreaseQty} >-</span>\n\n                        <input type=\"number\" className=\"form-control count d-inline\" value={quantity} readOnly />\n\n                        <span className=\"btn btn-primary plus\" onClick={increaseQty}>+</span>\n                    </div>\n                    <button type=\"button\" id=\"cart_btn\" \n                     disabled={product.stock==0?true:false} \n                     onClick={()=>{\n                        dispatch(addCartItem(product._id, quantity))\n                        toast('Cart Item Added!',{\n                            type: 'success',\n                            position: toast.POSITION.BOTTOM_CENTER\n                        })\n                    }}\n                     className=\"btn btn-primary d-inline ml-4\"\n                     >Add to Cart</button>\n\n                    <hr/>\n\n                    <p>Status: <span className={product.stock > 0 ?'greenColor':'redColor'} id=\"stock_status\">{ product.stock > 0 ?'In Stock':'Out of Stock'}</span></p>\n\n                    <hr/>\n\n                    <h4 className=\"mt-2\">Description:</h4>\n                    <p>{product.description}</p>\n                    <hr/>\n                    <p id=\"product_seller mb-3\">Sold by: <strong>{product.seller}</strong></p>\n                    { user ?\n                    <button onClick={handleShow} id=\"review_btn\" type=\"button\" className=\"btn btn-primary mt-4\" data-toggle=\"modal\" data-target=\"#ratingModal\">\n                                Submit Your Review\n                    </button> :\n                    <div className=\"alert alert-danger mt-5\"> Login to Post Review</div>\n                    }\n                    \n                    <div className=\"row mt-2 mb-5\">\n                        <div className=\"rating w-50\">\n                            <Modal show={show} onHide={handleClose}>\n                                <Modal.Header closeButton>\n                                <Modal.Title>Submit Review</Modal.Title>\n                                </Modal.Header>\n                                <Modal.Body>\n                                    <ul className=\"stars\" >\n                                        {\n                                            [1,2,3,4,5].map(star => (\n                                                <li \n                                                value={star}\n                                                onClick={()=>setRating(star)}\n                                                className={`star ${star<=rating?'orange':''}`}\n                                                onMouseOver={(e) => e.target.classList.add('yellow')}\n                                                onMouseOut={(e) => e.target.classList.remove('yellow')}\n\n                                                ><i className=\"fa fa-star\"></i></li>\n                                            ))\n                                        }\n                                       \n                                       \n                                    </ul>\n\n                                    <textarea  onChange={(e)=>setComment(e.target.value)} name=\"review\" id=\"review\" className=\"form-control mt-3\">\n\n                                    </textarea>\n                                    <button disabled={loading} onClick={reviewHandler}   aria-label=\"Close\" className=\"btn my-3 float-right review-btn px-4 text-white\">Submit</button>\n                                </Modal.Body>\n                               \n                            </Modal>\n                        </div>\n                    </div>\n                            \n                </div>\n\n                </div>\n\n                {\n                product.reviews && product.reviews.length > 0 ?\n                <ProductReview reviews={product.reviews} /> : null\n                }\n            </Fragment>}\n        </Fragment>\n    )\n}","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\layouts\\Footer.js",[],[],"C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\route\\ProtectedRoute.js",[],[],"C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\actions\\userActions.js",[],[],"C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\cart\\Shipping.js",[],[],"C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\cart\\Cart.js",["270","271","272"],[],"import { Fragment } from 'react'\nimport {useDispatch, useSelector} from 'react-redux';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { decreaseCartItemQty, increaseCartItemQty,removeItemFromCart } from '../../slices/cartSlice';\n\nexport default function Cart() {\n    const {items } = useSelector(state => state.cartState)\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n\n    const increaseQty = (item) => {\n        const count = item.quantity;\n        if(item.stock ==0 ||  count >= item.stock) return;\n        dispatch(increaseCartItemQty(item.product))\n    }\n    const decreaseQty = (item) => {\n        const count = item.quantity;\n        if(count == 1) return;\n        dispatch(decreaseCartItemQty(item.product))\n    }\n\n    const checkoutHandler = () =>{\n        navigate('/login?redirect=shipping')\n    }\n\n\n    return (\n        <Fragment>\n            {items.length==0 ? \n                <h2 className=\"mt-5\">Your Cart is Empty</h2> :\n                <Fragment>\n                     <h2 className=\"mt-5\">Your Cart: <b>{items.length} items</b></h2>\n                    <div className=\"row d-flex justify-content-between\">\n                        <div className=\"col-12 col-lg-8\">\n                            {items.map(item => (\n                                <Fragment key={item.product}>\n                                    <hr />\n                                    <div className=\"cart-item\">\n                                        <div className=\"row\">\n                                            <div className=\"col-4 col-lg-3\">\n                                                <img src={item.image} alt={item.name} height=\"90\" width=\"115\"/>\n                                            </div>\n\n                                            <div className=\"col-5 col-lg-3\">\n                                                <Link to={`/product/${item.product}`}>{item.name}</Link>\n                                            </div>\n\n\n                                            <div className=\"col-4 col-lg-2 mt-4 mt-lg-0\">\n                                                <p id=\"card_item_price\">${item.price}</p>\n                                            </div>\n\n                                            <div className=\"col-4 col-lg-3 mt-4 mt-lg-0\">\n                                                <div className=\"stockCounter d-inline\">\n                                                    <span className=\"btn btn-danger minus\" onClick={() => decreaseQty(item)}>-</span>\n                                                    <input type=\"number\" className=\"form-control count d-inline\" value={item.quantity} readOnly />\n\n                                                    <span className=\"btn btn-primary plus\" onClick={() => increaseQty(item)}>+</span>\n                                                </div>\n                                            </div>\n\n                                            <div className=\"col-4 col-lg-1 mt-4 mt-lg-0\">\n                                                <i id=\"delete_cart_item\" onClick={() => dispatch(removeItemFromCart(item.product))} className=\"fa fa-trash btn btn-danger\"></i>\n                                            </div>\n\n                                        </div>\n                                    </div>\n                                </Fragment>\n                                )\n                            )\n                            }\n\n                         \n                            <hr />\n                        </div>\n\n                        <div className=\"col-12 col-lg-3 my-4\">\n                            <div id=\"order_summary\">\n                                <h4>Order Summary</h4>\n                                <hr />\n                                <p>Subtotal:  <span className=\"order-summary-values\">{items.reduce((acc, item)=>(acc + item.quantity), 0)} (Units)</span></p>\n                                <p>Est. total: <span className=\"order-summary-values\">${items.reduce((acc, item)=>(acc + item.quantity * item.price), 0)}</span></p>\n                \n                                <hr />\n                                <button id=\"checkout_btn\" onClick={checkoutHandler} className=\"btn btn-primary btn-block\">Check out</button>\n                            </div>\n                        </div>\n                    </div>\n                </Fragment>\n            }\n           \n        </Fragment>\n    )\n}","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\cart\\ConfirmOrder.js",["273"],[],"import MetaData from '../layouts/MetaData';\nimport { Fragment, useEffect } from 'react';\nimport { validateShipping } from './Shipping';\nimport { useSelector } from 'react-redux';\nimport { Link, useNavigate } from 'react-router-dom';\nimport CheckoutSteps from './CheckoutStep';\n\nexport default function ConfirmOrder () {\n    const { shippingInfo, items:cartItems } = useSelector(state => state.cartState);\n    const { user } = useSelector(state => state.authState);\n    const navigate = useNavigate();\n    const itemsPrice = cartItems.reduce((acc, item)=> (acc + item.price * item.quantity),0);\n    const shippingPrice = itemsPrice > 200 ? 0 : 25;\n    let taxPrice = Number(0.05 * itemsPrice);\n    const totalPrice = Number(itemsPrice + shippingPrice + taxPrice).toFixed(2);\n    taxPrice = Number(taxPrice).toFixed(2)\n    \n    const processPayment = () => {\n        const data = {\n            itemsPrice,\n            shippingPrice,\n            taxPrice,\n            totalPrice\n        }\n        sessionStorage.setItem('orderInfo', JSON.stringify(data))\n        navigate('/payment')\n    }\n\n\n    useEffect(()=>{\n        validateShipping(shippingInfo, navigate)\n    },[])\n\n    return (\n        <Fragment>\n            <MetaData title={'Confirm Order'} />\n            <CheckoutSteps shipping confirmOrder />\n            <div className=\"row d-flex justify-content-between\">\n            <div className=\"col-12 col-lg-8 mt-5 order-confirm\">\n\n                <h4 className=\"mb-3\">Shipping Info</h4>\n                <p><b>Name:</b> {user.name}</p>\n                <p><b>Phone:</b> {shippingInfo.phoneNo}</p>\n                <p className=\"mb-4\"><b>Address:</b> {shippingInfo.address}, {shippingInfo.city}, {shippingInfo.postalCode}, {shippingInfo.state}, {shippingInfo.country} </p>\n                \n                <hr />\n                <h4 className=\"mt-4\">Your Cart Items:</h4>\n\n                    {cartItems.map(item => (\n                            <Fragment>\n                                <div className=\"cart-item my-1\">\n                                    <div className=\"row\">\n                                        <div className=\"col-4 col-lg-2\">\n                                            <img src={item.image} alt={item.name} height=\"45\" width=\"65\" />\n                                        </div>\n\n                                        <div className=\"col-5 col-lg-6\">\n                                            <Link to={`/product/${item.product}`}>{item.name}</Link>\n                                        </div>\n\n\n                                        <div className=\"col-4 col-lg-4 mt-4 mt-lg-0\">\n                                            <p>{item.quantity} x ${item.price} = <b>${item.quantity * item.price}</b></p>\n                                        </div>\n\n                                    </div>\n                                </div>\n                                <hr />\n                            </Fragment>\n                        )\n                    \n                        )\n                    \n                    }\n              \n              \n                \n\n            </div>\n\t\t\t\n            <div className=\"col-12 col-lg-3 my-4\">\n                    <div id=\"order_summary\">\n                        <h4>Order Summary</h4>\n                        <hr />\n                        <p>Subtotal:  <span className=\"order-summary-values\">${itemsPrice}</span></p>\n                        <p>Shipping: <span className=\"order-summary-values\">${shippingPrice}</span></p>\n                        <p>Tax:  <span className=\"order-summary-values\">${taxPrice}</span></p>\n\n                        <hr />\n\n                        <p>Total: <span className=\"order-summary-values\">${totalPrice}</span></p>\n\n                        <hr />\n                        <button id=\"checkout_btn\" onClick={processPayment} className=\"btn btn-primary btn-block\">Proceed to Payment</button>\n                    </div>\n            </div>\n        </div>\n        </Fragment>\n        \n    )\n}","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\order\\UserOrders.js",["274"],[],"import { Fragment, useEffect} from 'react'\nimport MetaData from '../layouts/MetaData';\nimport {MDBDataTable} from 'mdbreact'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { userOrders as userOrdersAction } from '../../actions/orderActions';\nimport { Link } from 'react-router-dom';\n\nexport default function UserOrders () {\n    const { userOrders = []} = useSelector(state => state.orderState)\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(userOrdersAction)\n    },[])\n\n    const setOrders = () => {\n        const data = {\n            columns: [\n                {\n                    label: \"Order ID\",\n                    field: 'id',\n                    sort: \"asc\"\n                },\n                {\n                    label: \"Number of Items\",\n                    field: 'numOfItems',\n                    sort: \"asc\"\n                },\n                {\n                    label: \"Amount\",\n                    field: 'amount',\n                    sort: \"asc\"\n                },\n                {\n                    label: \"Status\",\n                    field: 'status',\n                    sort: \"asc\"\n                },\n                {\n                    label: \"Actions\",\n                    field: 'actions',\n                    sort: \"asc\"\n                }\n            ],\n            rows:[]\n        }\n\n        userOrders.forEach(userOrder => {\n            data.rows.push({\n                id:  userOrder._id,\n                numOfItems: userOrder.orderItems.length,\n                amount: `$${userOrder.totalPrice}`,\n                status: userOrder.orderStatus && userOrder.orderStatus.includes('Delivered') ?\n                (<p style={{color: 'green'}}> {userOrder.orderStatus} </p>):\n                (<p style={{color: 'red'}}> {userOrder.orderStatus} </p>),\n                actions: <Link to={`/order/${userOrder._id}`} className=\"btn btn-primary\" >\n                    <i className='fa fa-eye'></i>\n                </Link>\n            })\n        })\n\n\n        return  data;\n    }\n\n\n    return (\n        <Fragment>\n            <MetaData title=\"My Orders\" />\n            <h1 className='mt-5'>My Orders</h1> \n            <MDBDataTable\n                className='px-3'\n                bordered\n                striped\n                hover\n                data={setOrders()}\n            />\n        </Fragment>\n    )\n}","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\cart\\Payment.js",["275"],[],"import { useElements, useStripe } from \"@stripe/react-stripe-js\"\nimport { CardNumberElement, CardExpiryElement, CardCvcElement } from \"@stripe/react-stripe-js\";\nimport axios from \"axios\";\nimport { useEffect } from \"react\";\nimport {useDispatch, useSelector} from 'react-redux';\nimport {useNavigate} from 'react-router-dom'\nimport { toast } from \"react-toastify\";\nimport { orderCompleted } from \"../../slices/cartSlice\";\nimport {validateShipping} from '../cart/Shipping';\nimport {createOrder} from '../../actions/orderActions'\nimport { clearError as clearOrderError } from \"../../slices/orderSlice\";\n\nexport default function Payment() {\n    const stripe = useStripe();\n    const elements = useElements();\n    const dispatch = useDispatch()\n    const navigate = useNavigate();\n    const orderInfo = JSON.parse(sessionStorage.getItem('orderInfo'))\n    const { user } = useSelector(state => state.authState)\n    const {items:cartItems, shippingInfo } = useSelector(state => state.cartState)\n    const { error:orderError } = useSelector(state => state.orderState)\n\n    const paymentData = {\n        amount : Math.round( orderInfo.totalPrice * 100),\n        shipping :{\n            name: user.name,\n            address:{\n                city: shippingInfo.city,\n                postal_code : shippingInfo.postalCode,\n                country: shippingInfo.country,\n                state: shippingInfo.state,\n                line1 : shippingInfo.address\n            },\n            phone: shippingInfo.phoneNo\n        }\n    }\n\n    const order = {\n        orderItems: cartItems,\n        shippingInfo\n    }\n\n    if(orderInfo) {\n        order.itemsPrice = orderInfo.itemsPrice\n        order.shippingPrice = orderInfo.shippingPrice\n        order.taxPrice = orderInfo.taxPrice\n        order.totalPrice = orderInfo.totalPrice\n        \n    }\n\n    useEffect(() => {\n        validateShipping(shippingInfo, navigate)\n        if(orderError) {\n            toast(orderError, {\n                position: toast.POSITION.BOTTOM_CENTER,\n                type: 'error',\n                onOpen: ()=> { dispatch(clearOrderError()) }\n            })\n            return\n        }\n\n    },[])\n\n    const submitHandler = async (e) => {\n        e.preventDefault();\n        document.querySelector('#pay_btn').disabled = true;\n        try {\n            const {data} = await axios.post('/api/v1/payment/process', paymentData)\n            const clientSecret = data.client_secret\n            const result = await stripe.confirmCardPayment(clientSecret, {\n                payment_method: {\n                    card: elements.getElement(CardNumberElement),\n                    billing_details: {\n                        name: user.name,\n                        email: user.email\n                    }\n                }\n            })\n\n            if(result.error){\n                toast(result.error.message, {\n                    type: 'error',\n                    position: toast.POSITION.BOTTOM_CENTER\n                })\n                document.querySelector('#pay_btn').disabled = false;\n            }else{\n                if((await result).paymentIntent.status === 'succeeded') {\n                    toast('Payment Success!', {\n                        type: 'success',\n                        position: toast.POSITION.BOTTOM_CENTER\n                    })\n                    order.paymentInfo = {\n                        id: result.paymentIntent.id,\n                        status: result.paymentIntent.status\n                    }\n                    dispatch(orderCompleted())\n                    dispatch(createOrder(order))\n\n                    navigate('/order/success')\n                }else{\n                    toast('Please Try again!', {\n                        type: 'warning',\n                        position: toast.POSITION.BOTTOM_CENTER\n                    })\n                }\n            }\n\n\n        } catch (error) {\n            \n        }\n    }\n\n\n     return (\n        <div className=\"row wrapper\">\n            <div className=\"col-10 col-lg-5\">\n                <form onSubmit={submitHandler} className=\"shadow-lg\">\n                    <h1 className=\"mb-4\">Card Info</h1>\n                    <div className=\"form-group\">\n                    <label htmlFor=\"card_num_field\">Card Number</label>\n                    <CardNumberElement\n                        type=\"text\"\n                        id=\"card_num_field\"\n                        className=\"form-control\"\n                       \n                    />\n                    </div>\n                    \n                    <div className=\"form-group\">\n                    <label htmlFor=\"card_exp_field\">Card Expiry</label>\n                    <CardExpiryElement\n                        type=\"text\"\n                        id=\"card_exp_field\"\n                        className=\"form-control\"\n                       \n                    />\n                    </div>\n                    \n                    <div className=\"form-group\">\n                    <label htmlFor=\"card_cvc_field\">Card CVC</label>\n                    <CardCvcElement\n                        type=\"text\"\n                        id=\"card_cvc_field\"\n                        className=\"form-control\"\n                        value=\"\"\n                    />\n                    </div>\n        \n                \n                    <button\n                    id=\"pay_btn\"\n                    type=\"submit\"\n                    className=\"btn btn-block py-3\"\n                    >\n                    Pay - { ` $${orderInfo && orderInfo.totalPrice}` }\n                    </button>\n        \n                </form>\n            </div>\n        </div>\n    )\n}","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\cart\\OrderSuccess.js",[],[],"C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\order\\OrderDetail.js",["276"],[],"import { Fragment, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, useParams } from 'react-router-dom';\nimport  Loader from '../layouts/Loader';\nimport {orderDetail as orderDetailAction } from '../../actions/orderActions';\nexport default function OrderDetail () {\n    const { orderDetail, loading } = useSelector(state => state.orderState)\n    const { shippingInfo={}, user={}, orderStatus=\"Processing\", orderItems=[], totalPrice=0, paymentInfo={} } = orderDetail;\n    const isPaid = paymentInfo && paymentInfo.status === \"succeeded\" ? true: false;\n    const dispatch = useDispatch();\n    const {id } = useParams();\n\n    useEffect(() => {\n        dispatch(orderDetailAction(id))\n    },[id])\n\n    return (\n        <Fragment>\n            {   loading ? <Loader/> :\n                <Fragment>\n                    <div className=\"row d-flex justify-content-between\">\n                        <div className=\"col-12 col-lg-8 mt-5 order-details\">\n    \n                            <h1 className=\"my-5\">Order # {orderDetail._id}</h1>\n    \n                            <h4 className=\"mb-4\">Shipping Info</h4>\n                            <p><b>Name:</b> {user.name}</p>\n                            <p><b>Phone:</b> {shippingInfo.phoneNo}</p>\n                            <p className=\"mb-4\"><b>Address:</b>{shippingInfo.address}, {shippingInfo.city}, {shippingInfo.postalCode}, {shippingInfo.state}, {shippingInfo.country}</p>\n                            <p><b>Amount:</b> ${totalPrice}</p>\n    \n                            <hr />\n    \n                            <h4 className=\"my-4\">Payment</h4>\n                            <p className={isPaid ? 'greenColor' : 'redColor' } ><b>{isPaid ? 'PAID' : 'NOT PAID' }</b></p>\n    \n    \n                            <h4 className=\"my-4\">Order Status:</h4>\n                            <p className={orderStatus&&orderStatus.includes('Delivered') ? 'greenColor' : 'redColor' } ><b>{orderStatus}</b></p>\n    \n    \n                            <h4 className=\"my-4\">Order Items:</h4>\n    \n                            <hr />\n                            <div className=\"cart-item my-1\">\n                                {orderItems && orderItems.map(item => (\n                                    <div className=\"row my-5\">\n                                        <div className=\"col-4 col-lg-2\">\n                                            <img src={item.image} alt={item.name} height=\"45\" width=\"65\" />\n                                        </div>\n\n                                        <div className=\"col-5 col-lg-5\">\n                                            <Link to={`/product/${item.product}`}>{item.name}</Link>\n                                        </div>\n\n\n                                        <div className=\"col-4 col-lg-2 mt-4 mt-lg-0\">\n                                            <p>${item.price}</p>\n                                        </div>\n\n                                        <div className=\"col-4 col-lg-3 mt-4 mt-lg-0\">\n                                            <p>{item.quantity} Piece(s)</p>\n                                        </div>\n                                    </div>\n                                ))}\n                                    \n                            </div>\n                            <hr />\n                        </div>\n                    </div>\n                </Fragment>\n            }\n        </Fragment>\n    )\n}","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\admin\\Dashboard.js",["277"],[],"import Sidebar from \"./Sidebar\";\nimport {useDispatch, useSelector} from 'react-redux';\nimport { useEffect } from \"react\";\nimport { getAdminProducts } from \"../../actions/productActions\";\nimport {getUsers} from '../../actions/userActions'\nimport {adminOrders as adminOrdersAction} from '../../actions/orderActions'\nimport { Link } from \"react-router-dom\";\n\nexport default function Dashboard () {\n    const { products = [] } = useSelector( state => state.productsState);\n    const { adminOrders = [] } = useSelector( state => state.orderState);\n    const { users = [] } = useSelector( state => state.userState);\n    const dispatch = useDispatch();\n    let outOfStock = 0;\n\n    if (products.length > 0) {\n        products.forEach( product => {\n            if( product.stock === 0  ) {\n                outOfStock = outOfStock + 1;\n            }\n        })\n    }\n\n    let totalAmount = 0;\n    if (adminOrders.length > 0) {\n        adminOrders.forEach( order => {\n            totalAmount += order.totalPrice\n        })\n    }\n\n\n\n    useEffect( () => {\n       dispatch(getAdminProducts);\n       dispatch(getUsers);\n       dispatch(adminOrdersAction)\n    }, [])\n\n\n    return (\n        <div className=\"row\">\n            <div className=\"col-12 col-md-2\">\n                    <Sidebar/>\n            </div>\n            <div className=\"col-12 col-md-10\">\n                <h1 className=\"my-4\">Dashboard</h1>\n                <div className=\"row pr-4\">\n                    <div className=\"col-xl-12 col-sm-12 mb-3\">\n                        <div className=\"card text-white bg-primary o-hidden h-100\">\n                            <div className=\"card-body\">\n                                <div className=\"text-center card-font-size\">Total Amount<br /> <b>${totalAmount}</b>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row pr-4\">\n                    <div className=\"col-xl-3 col-sm-6 mb-3\">\n                        <div className=\"card text-white bg-success o-hidden h-100\">\n                            <div className=\"card-body\">\n                                <div className=\"text-center card-font-size\">Products<br /> <b>{products.length}</b></div>\n                            </div>\n                            <Link className=\"card-footer text-white clearfix small z-1\" to=\"/admin/products\">\n                                <span className=\"float-left\">View Details</span>\n                                <span className=\"float-right\">\n                                    <i className=\"fa fa-angle-right\"></i>\n                                </span>\n                            </Link>\n                        </div>\n                    </div>\n\n\n                    <div className=\"col-xl-3 col-sm-6 mb-3\">\n                        <div className=\"card text-white bg-danger o-hidden h-100\">\n                            <div className=\"card-body\">\n                                <div className=\"text-center card-font-size\">Orders<br /> <b>{adminOrders.length}</b></div>\n                            </div>\n                            <Link className=\"card-footer text-white clearfix small z-1\" to=\"/admin/orders\">\n                                <span className=\"float-left\">View Details</span>\n                                <span className=\"float-right\">\n                                    <i className=\"fa fa-angle-right\"></i>\n                                </span>\n                            </Link>\n                        </div>\n                    </div>\n\n\n                    <div className=\"col-xl-3 col-sm-6 mb-3\">\n                        <div className=\"card text-white bg-info o-hidden h-100\">\n                            <div className=\"card-body\">\n                                <div className=\"text-center card-font-size\">Users<br /> <b>{users.length}</b></div>\n                            </div>\n                            <Link className=\"card-footer text-white clearfix small z-1\" to=\"/admin/users\">\n                                <span className=\"float-left\">View Details</span>\n                                <span className=\"float-right\">\n                                    <i className=\"fa fa-angle-right\"></i>\n                                </span>\n                            </Link>\n                        </div>\n                    </div>\n\n\n                    <div className=\"col-xl-3 col-sm-6 mb-3\">\n                        <div className=\"card text-white bg-warning o-hidden h-100\">\n                            <div className=\"card-body\">\n                                <div className=\"text-center card-font-size\">Out of Stock<br /> <b>{outOfStock}</b></div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\admin\\NewProduct.js",["278","279","280"],[],"import { Fragment, useEffect, useState } from \"react\";\nimport Sidebar from \"./Sidebar\";\nimport { useDispatch, useSelector} from 'react-redux';\nimport { useNavigate } from \"react-router-dom\";\nimport { createNewProduct } from \"../../actions/productActions\";\nimport { clearError, clearProductCreated } from \"../../slices/productSlice\";\nimport { toast } from \"react-toastify\";\n\nexport  default function NewProduct () {\n    const [name, setName] = useState(\"\");\n    const [price, setPrice] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [category, setCategory] = useState(\"\");\n    const [stock, setStock] = useState(0);\n    const [seller, setSeller] = useState(\"\");\n    const [images, setImages] = useState([]);\n    const [imagesPreview, setImagesPreview] = useState([]);\n    \n    const { loading, isProductCreated, error } = useSelector( state => state.productState)\n\n    const categories = [\n        'Electronics',\n        'Mobile Phones',\n        'Laptops',\n        'Accessories',\n        'Headphones',\n        'Food',\n        'Books',\n        'Clothes/Shoes',\n        'Beauty/Health',\n        'Sports',\n        'Outdoor',\n        'Home'\n    ];\n\n    const navigate = useNavigate();\n    const dispatch = useDispatch();\n\n    const onImagesChange = (e) => {\n        const files = Array.from(e.target.files);\n\n        files.forEach(file => {\n            \n            const reader = new FileReader();\n\n            reader.onload = () => {\n                if(reader.readyState == 2 ) {\n                    setImagesPreview(oldArray => [...oldArray, reader.result])\n                    setImages(oldArray => [...oldArray, file])\n                }\n            }\n\n            reader.readAsDataURL(file)\n\n\n        })\n\n    }\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n        const formData = new FormData();\n        formData.append('name' , name);\n        formData.append('price' , price);\n        formData.append('stock' , stock);\n        formData.append('description' , description);\n        formData.append('seller' , seller);\n        formData.append('category' , category);\n        images.forEach (image => {\n            formData.append('images', image)\n        })\n        dispatch(createNewProduct(formData))\n    }\n\n    useEffect(() => {\n        if(isProductCreated) {\n            toast('Product Created Succesfully!',{\n                type: 'success',\n                position: toast.POSITION.BOTTOM_CENTER,\n                onOpen: () => dispatch(clearProductCreated())\n            })\n            navigate('/admin/products')\n            return;\n        }\n\n        if(error)  {\n            toast(error, {\n                position: toast.POSITION.BOTTOM_CENTER,\n                type: 'error',\n                onOpen: ()=> { dispatch(clearError()) }\n            })\n            return\n        }\n    }, [isProductCreated, error, dispatch])\n\n\n    return (\n        <div className=\"row\">\n            <div className=\"col-12 col-md-2\">\n                    <Sidebar/>\n            </div>\n            <div className=\"col-12 col-md-10\">\n                <Fragment>\n                    <div className=\"wrapper my-5\"> \n                        <form onSubmit={submitHandler} className=\"shadow-lg\" encType='multipart/form-data'>\n                            <h1 className=\"mb-4\">New Product</h1>\n\n                            <div className=\"form-group\">\n                            <label htmlFor=\"name_field\">Name</label>\n                            <input\n                                type=\"text\"\n                                id=\"name_field\"\n                                className=\"form-control\"\n                                onChange={e => setName(e.target.value)}\n                                value={name}\n                            />\n                            </div>\n\n                            <div className=\"form-group\">\n                                <label htmlFor=\"price_field\">Price</label>\n                                <input\n                                type=\"text\"\n                                id=\"price_field\"\n                                className=\"form-control\"\n                                onChange={e => setPrice(e.target.value)}\n                                value={price}\n                                />\n                            </div>\n\n                            <div className=\"form-group\">\n                                <label htmlFor=\"description_field\">Description</label>\n                                <textarea \n                                    className=\"form-control\"\n                                    id=\"description_field\" \n                                    rows=\"8\"\n                                    onChange={e => setDescription(e.target.value)}\n                                    value={description}\n                                  ></textarea>\n                            </div>\n\n                            <div className=\"form-group\">\n                                <label htmlFor=\"category_field\">Category</label>\n                                <select onChange={e => setCategory(e.target.value)} className=\"form-control\" id=\"category_field\">\n                                    <option value=\"\">Select</option>\n                                    {categories.map( category => (\n                                        <option key={category} value={category}>{category}</option>\n                                    ))}\n                                </select>\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"stock_field\">Stock</label>\n                                <input\n                                type=\"number\"\n                                id=\"stock_field\"\n                                className=\"form-control\"\n                                onChange={e => setStock(e.target.value)}\n                                value={stock}\n                                />\n                            </div>\n\n                            <div className=\"form-group\">\n                                <label htmlFor=\"seller_field\">Seller Name</label>\n                                <input\n                                type=\"text\"\n                                id=\"seller_field\"\n                                className=\"form-control\"\n                                onChange={e => setSeller(e.target.value)}\n                                value={seller}\n                                />\n                            </div>\n                            \n                            <div className='form-group'>\n                                <label>Images</label>\n                                \n                                    <div className='custom-file'>\n                                        <input\n                                            type='file'\n                                            name='product_images'\n                                            className='custom-file-input'\n                                            id='customFile'\n                                            multiple\n                                            onChange={onImagesChange}\n                                        \n                                        />\n\n                                        <label className='custom-file-label' htmlFor='customFile'>\n                                            Choose Images\n                                        </label>\n                                    </div>\n                                    {imagesPreview.map(image => (\n                                        <img\n                                            className=\"mt-3 mr-2\"\n                                            key={image}\n                                            src={image}\n                                            alt={`Image Preview`}\n                                            width=\"55\"\n                                            height=\"52\"\n                                        />\n                                    ))}\n                            </div>\n\n                \n                            <button\n                            id=\"login_button\"\n                            type=\"submit\"\n                            disabled={loading}\n                            className=\"btn btn-block py-3\"\n                            >\n                            CREATE\n                            </button>\n\n                        </form>\n                    </div>\n                </Fragment>\n            </div>\n        </div>\n        \n    )\n}","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\admin\\ProductList.js",["281"],[],"import { Fragment, useEffect } from \"react\"\nimport { Button } from \"react-bootstrap\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { Link } from \"react-router-dom\"\nimport { deleteProduct, getAdminProducts } from \"../../actions/productActions\"\nimport { clearError, clearProductDeleted } from \"../../slices/productSlice\"\nimport Loader from '../layouts/Loader';\nimport { MDBDataTable} from 'mdbreact';\nimport {toast } from 'react-toastify'\nimport Sidebar from \"./Sidebar\"\n\nexport default function ProductList() {\n    const { products = [], loading = true, error }  = useSelector(state => state.productsState)\n    const { isProductDeleted, error:productError }  = useSelector(state => state.productState)\n    const dispatch = useDispatch();\n\n    const setProducts = () => {\n        const data = {\n            columns : [\n                {\n                    label: 'ID',\n                    field: 'id',\n                    sort: 'asc'\n                },\n                {\n                    label: 'Name',\n                    field: 'name',\n                    sort: 'asc'\n                },\n                {\n                    label: 'Price',\n                    field: 'price',\n                    sort: 'asc'\n                },\n                {\n                    label: 'Stock',\n                    field: 'stock',\n                    sort: 'asc'\n                },\n                {\n                    label: 'Actions',\n                    field: 'actions',\n                    sort: 'asc'\n                }\n            ],\n            rows : []\n        }\n\n        products.forEach( product => {\n            data.rows.push({\n                id: product._id,\n                name: product.name,\n                price : `$${product.price}`,\n                stock: product.stock,\n                actions: (\n                    <Fragment>\n                        <Link to={`/admin/product/${product._id}`} className=\"btn btn-primary\"> <i className=\"fa fa-pencil\"></i></Link>\n                        <Button onClick={e => deleteHandler(e, product._id)} className=\"btn btn-danger py-1 px-2 ml-2\">\n                            <i className=\"fa fa-trash\"></i>\n                        </Button>\n                    </Fragment>\n                )\n            })\n        })\n\n        return data;\n    }\n\n    const deleteHandler = (e, id) => {\n        e.target.disabled = true;\n        dispatch(deleteProduct(id))\n    }\n\n    useEffect(() => {\n        if(error || productError) {\n            toast(error || productError, {\n                position: toast.POSITION.BOTTOM_CENTER,\n                type: 'error',\n                onOpen: ()=> { dispatch(clearError()) }\n            })\n            return\n        }\n        if(isProductDeleted) {\n            toast('Product Deleted Succesfully!',{\n                type: 'success',\n                position: toast.POSITION.BOTTOM_CENTER,\n                onOpen: () => dispatch(clearProductDeleted())\n            })\n            return;\n        }\n\n        dispatch(getAdminProducts)\n    },[dispatch, error, isProductDeleted])\n\n\n    return (\n        <div className=\"row\">\n        <div className=\"col-12 col-md-2\">\n                <Sidebar/>\n        </div>\n        <div className=\"col-12 col-md-10\">\n            <h1 className=\"my-4\">Product List</h1>\n            <Fragment>\n                {loading ? <Loader/> : \n                    <MDBDataTable\n                        data={setProducts()}\n                        bordered\n                        striped\n                        hover\n                        className=\"px-3\"\n                    />\n                }\n            </Fragment>\n        </div>\n    </div>\n    )\n}","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\admin\\UpdateProduct.js",["282","283","284","285"],[],"import { Fragment, useEffect, useState } from \"react\";\nimport Sidebar from \"./Sidebar\";\nimport { useDispatch, useSelector} from 'react-redux';\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { getProduct, updateProduct } from \"../../actions/productActions\";\nimport { clearError, clearProductUpdated } from \"../../slices/productSlice\";\nimport { toast } from \"react-toastify\";\n\nexport default function UpdateProduct () {\n    const [name, setName] = useState(\"\");\n    const [price, setPrice] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [category, setCategory] = useState(\"\");\n    const [stock, setStock] = useState(0);\n    const [seller, setSeller] = useState(\"\");\n    const [images, setImages] = useState([]);\n    const [imagesCleared, setImagesCleared] = useState(false);\n    const [imagesPreview, setImagesPreview] = useState([]);\n    const { id:productId } = useParams();\n    \n    const { loading, isProductUpdated, error, product } = useSelector( state => state.productState)\n\n    const categories = [\n        'Electronics',\n        'Mobile Phones',\n        'Laptops',\n        'Accessories',\n        'Headphones',\n        'Food',\n        'Books',\n        'Clothes/Shoes',\n        'Beauty/Health',\n        'Sports',\n        'Outdoor',\n        'Home'\n    ];\n\n    const navigate = useNavigate();\n    const dispatch = useDispatch();\n\n    const onImagesChange = (e) => {\n        const files = Array.from(e.target.files);\n\n        files.forEach(file => {\n            \n            const reader = new FileReader();\n\n            reader.onload = () => {\n                if(reader.readyState == 2 ) {\n                    setImagesPreview(oldArray => [...oldArray, reader.result])\n                    setImages(oldArray => [...oldArray, file])\n                }\n            }\n\n            reader.readAsDataURL(file)\n\n\n        })\n\n    }\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n        const formData = new FormData();\n        formData.append('name' , name);\n        formData.append('price' , price);\n        formData.append('stock' , stock);\n        formData.append('description' , description);\n        formData.append('seller' , seller);\n        formData.append('category' , category);\n        images.forEach (image => {\n            formData.append('images', image)\n        })\n        formData.append('imagesCleared' , imagesCleared);\n        dispatch(updateProduct(productId, formData))\n    }\n\n    const clearImagesHandler = () => {\n        setImages([]);\n        setImagesPreview([]);\n        setImagesCleared(true);\n    }\n\n    \n    useEffect(() => {\n        if(isProductUpdated) {\n            toast('Product Updated Succesfully!',{\n                type: 'success',\n                position: toast.POSITION.BOTTOM_CENTER,\n                onOpen: () => dispatch(clearProductUpdated())\n            })\n            setImages([])\n            return;\n        }\n\n        if(error)  {\n            toast(error, {\n                position: toast.POSITION.BOTTOM_CENTER,\n                type: 'error',\n                onOpen: ()=> { dispatch(clearError()) }\n            })\n            return\n        }\n\n        dispatch(getProduct(productId))\n    }, [isProductUpdated, error, dispatch])\n\n\n    useEffect(() => {\n        if(product._id) {\n            setName(product.name);\n            setPrice(product.price);\n            setStock(product.stock);\n            setDescription(product.description);\n            setSeller(product.seller);\n            setCategory(product.category);\n            \n            let images = [];\n            product.images.forEach( image => {\n                images.push(image.image)\n            });\n            setImagesPreview(images)\n        }\n    },[product])\n\n\n    return (\n        <div className=\"row\">\n            <div className=\"col-12 col-md-2\">\n                    <Sidebar/>\n            </div>\n            <div className=\"col-12 col-md-10\">\n                <Fragment>\n                    <div className=\"wrapper my-5\"> \n                        <form onSubmit={submitHandler} className=\"shadow-lg\" encType='multipart/form-data'>\n                            <h1 className=\"mb-4\">Update Product</h1>\n\n                            <div className=\"form-group\">\n                            <label htmlFor=\"name_field\">Name</label>\n                            <input\n                                type=\"text\"\n                                id=\"name_field\"\n                                className=\"form-control\"\n                                onChange={e => setName(e.target.value)}\n                                value={name}\n                            />\n                            </div>\n\n                            <div className=\"form-group\">\n                                <label htmlFor=\"price_field\">Price</label>\n                                <input\n                                type=\"text\"\n                                id=\"price_field\"\n                                className=\"form-control\"\n                                onChange={e => setPrice(e.target.value)}\n                                value={price}\n                                />\n                            </div>\n\n                            <div className=\"form-group\">\n                                <label htmlFor=\"description_field\">Description</label>\n                                <textarea \n                                    className=\"form-control\"\n                                    id=\"description_field\" \n                                    rows=\"8\"\n                                    onChange={e => setDescription(e.target.value)}\n                                    value={description}\n                                  ></textarea>\n                            </div>\n\n                            <div className=\"form-group\">\n                                <label htmlFor=\"category_field\">Category</label>\n                                <select value={category} onChange={e => setCategory(e.target.value)} className=\"form-control\" id=\"category_field\">\n                                    <option value=\"\">Select</option>\n                                    {categories.map( category => (\n                                        <option key={category} value={category}>{category}</option>\n                                    ))}\n                                </select>\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"stock_field\">Stock</label>\n                                <input\n                                type=\"number\"\n                                id=\"stock_field\"\n                                className=\"form-control\"\n                                onChange={e => setStock(e.target.value)}\n                                value={stock}\n                                />\n                            </div>\n\n                            <div className=\"form-group\">\n                                <label htmlFor=\"seller_field\">Seller Name</label>\n                                <input\n                                type=\"text\"\n                                id=\"seller_field\"\n                                className=\"form-control\"\n                                onChange={e => setSeller(e.target.value)}\n                                value={seller}\n                                />\n                            </div>\n                            \n                            <div className='form-group'>\n                                <label>Images</label>\n                                \n                                    <div className='custom-file'>\n                                        <input\n                                            type='file'\n                                            name='product_images'\n                                            className='custom-file-input'\n                                            id='customFile'\n                                            multiple\n                                            onChange={onImagesChange}\n                                        \n                                        />\n\n                                        <label className='custom-file-label' htmlFor='customFile'>\n                                            Choose Images\n                                        </label>\n                                    </div>\n\n                                    { imagesPreview.length > 0 &&  <span className=\"mr-2\" onClick={clearImagesHandler} style={{cursor: \"pointer\"}}><i className=\"fa fa-trash\"></i></span>}\n                                    {imagesPreview.map(image => (\n                                        <img\n                                            className=\"mt-3 mr-2\"\n                                            key={image}\n                                            src={image}\n                                            alt={`Image Preview`}\n                                            width=\"55\"\n                                            height=\"52\"\n                                        />\n                                    ))}\n                            </div>\n\n                \n                            <button\n                            id=\"login_button\"\n                            type=\"submit\"\n                            disabled={loading}\n                            className=\"btn btn-block py-3\"\n                            >\n                            UPDATE\n                            </button>\n\n                        </form>\n                    </div>\n                </Fragment>\n            </div>\n        </div>\n        \n    )\n}","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\admin\\UserList.js",[],[],"C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\admin\\UpdateOrder.js",["286","287"],[],"import { Fragment, useEffect, useState } from \"react\";\nimport Sidebar from \"./Sidebar\";\nimport { useDispatch, useSelector} from 'react-redux';\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { orderDetail as orderDetailAction, updateOrder } from \"../../actions/orderActions\";\nimport { toast } from \"react-toastify\";\nimport { clearOrderUpdated, clearError } from \"../../slices/orderSlice\";\nimport { Link } from \"react-router-dom\";\n\nexport default function UpdateOrder () {\n    \n    \n    const { loading, isOrderUpdated, error, orderDetail } = useSelector( state => state.orderState)\n    const { user = {}, orderItems = [], shippingInfo = {}, totalPrice = 0, paymentInfo = {}} = orderDetail;\n    const isPaid = paymentInfo.status === 'succeeded'? true: false;\n    const [orderStatus, setOrderStatus] = useState(\"Processing\");\n    const { id:orderId } = useParams();\n\n\n    const navigate = useNavigate();\n    const dispatch = useDispatch();\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n        const orderData = {};\n        orderData.orderStatus = orderStatus;\n        dispatch(updateOrder(orderId, orderData))\n    }\n    \n    useEffect(() => {\n        if(isOrderUpdated) {\n            toast('Order Updated Succesfully!',{\n                type: 'success',\n                position: toast.POSITION.BOTTOM_CENTER,\n                onOpen: () => dispatch(clearOrderUpdated())\n            })\n           \n            return;\n        }\n\n        if(error)  {\n            toast(error, {\n                position: toast.POSITION.BOTTOM_CENTER,\n                type: 'error',\n                onOpen: ()=> { dispatch(clearError()) }\n            })\n            return\n        }\n\n        dispatch(orderDetailAction(orderId))\n    }, [isOrderUpdated, error, dispatch])\n\n\n    useEffect(() => {\n        if(orderDetail._id) {\n            setOrderStatus(orderDetail.orderStatus);\n        }\n    },[orderDetail])\n\n\n    return (\n        <div className=\"row\">\n            <div className=\"col-12 col-md-2\">\n                    <Sidebar/>\n            </div>\n            <div className=\"col-12 col-md-10\">\n                <Fragment>\n                <div className=\"row d-flex justify-content-around\">\n                        <div className=\"col-12 col-lg-8 mt-5 order-details\">\n    \n                            <h1 className=\"my-5\">Order # {orderDetail._id}</h1>\n    \n                            <h4 className=\"mb-4\">Shipping Info</h4>\n                            <p><b>Name:</b> {user.name}</p>\n                            <p><b>Phone:</b> {shippingInfo.phoneNo}</p>\n                            <p className=\"mb-4\"><b>Address:</b>{shippingInfo.address}, {shippingInfo.city}, {shippingInfo.postalCode}, {shippingInfo.state}, {shippingInfo.country}</p>\n                            <p><b>Amount:</b> ${totalPrice}</p>\n    \n                            <hr />\n    \n                            <h4 className=\"my-4\">Payment</h4>\n                            <p className={isPaid ? 'greenColor' : 'redColor' } ><b>{isPaid ? 'PAID' : 'NOT PAID' }</b></p>\n    \n    \n                            <h4 className=\"my-4\">Order Status:</h4>\n                            <p className={orderStatus&&orderStatus.includes('Delivered') ? 'greenColor' : 'redColor' } ><b>{orderStatus}</b></p>\n    \n    \n                            <h4 className=\"my-4\">Order Items:</h4>\n    \n                            <hr />\n                            <div className=\"cart-item my-1\">\n                                {orderItems && orderItems.map(item => (\n                                    <div className=\"row my-5\">\n                                        <div className=\"col-4 col-lg-2\">\n                                            <img src={item.image} alt={item.name} height=\"45\" width=\"65\" />\n                                        </div>\n\n                                        <div className=\"col-5 col-lg-5\">\n                                            <Link to={`/product/${item.product}`}>{item.name}</Link>\n                                        </div>\n\n\n                                        <div className=\"col-4 col-lg-2 mt-4 mt-lg-0\">\n                                            <p>${item.price}</p>\n                                        </div>\n\n                                        <div className=\"col-4 col-lg-3 mt-4 mt-lg-0\">\n                                            <p>{item.quantity} Piece(s)</p>\n                                        </div>\n                                    </div>\n                                ))}\n                                    \n                            </div>\n                            <hr />\n                        </div>\n                        <div className=\"col-12 col-lg-3 mt-5\">\n                            <h4 className=\"my-4\">Order Status</h4>\n                            <div className=\"form-group\">\n                                <select \n                                className=\"form-control\"\n                                onChange={e => setOrderStatus(e.target.value)}\n                                value={orderStatus}\n                                name=\"status\"\n                                >\n                                    <option value=\"Processing\">Processing</option>\n                                    <option value=\"Shipped\">Shipped</option>\n                                    <option value=\"Delivered\">Delivered</option>\n                                </select>\n                              \n                            </div>\n                            <button\n                                disabled={loading}\n                                onClick={submitHandler}\n                                className=\"btn btn-primary btn-block\"\n                                >\n                                    Update Status\n                            </button>\n\n                        </div>\n                    </div>\n                </Fragment>\n            </div>\n        </div>\n        \n    )\n}","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\admin\\OrderList.js",[],[],"C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\admin\\UpdateUser.js",["288","289"],[],"import { Fragment, useEffect, useState } from \"react\";\nimport Sidebar from \"./Sidebar\";\nimport { useDispatch, useSelector} from 'react-redux';\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { getUser, updateUser } from \"../../actions/userActions\";\nimport { clearError, clearUserUpdated } from \"../../slices/userSlice\";\nimport { toast } from \"react-toastify\";\n\nexport default function UpdateUser () {\n    const [name, setName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [role, setRole] = useState(\"\");\n   \n    const { id:userId } = useParams();\n    \n    const { loading, isUserUpdated, error, user } = useSelector( state => state.userState)\n    const {  user:authUser } = useSelector( state => state.authState)\n\n    const dispatch = useDispatch();\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n        const formData = new FormData();\n        formData.append('name' , name);\n        formData.append('email' , email);\n        formData.append('role' , role);\n        dispatch(updateUser(userId, formData))\n    }\n\n    useEffect(() => {\n        if(isUserUpdated) {\n            toast('User Updated Succesfully!',{\n                type: 'success',\n                position: toast.POSITION.BOTTOM_CENTER,\n                onOpen: () => dispatch(clearUserUpdated())\n            })\n            return;\n        }\n\n        if(error)  {\n            toast(error, {\n                position: toast.POSITION.BOTTOM_CENTER,\n                type: 'error',\n                onOpen: ()=> { dispatch(clearError()) }\n            })\n            return\n        }\n\n        dispatch(getUser(userId))\n    }, [isUserUpdated, error, dispatch])\n\n\n    useEffect(() => {\n        if(user._id) {\n            setName(user.name);\n            setEmail(user.email);\n            setRole(user.role);\n        }\n    },[user])\n\n\n    return (\n        <div className=\"row\">\n            <div className=\"col-12 col-md-2\">\n                    <Sidebar/>\n            </div>\n            <div className=\"col-12 col-md-10\">\n                <Fragment>\n                    <div className=\"wrapper my-5\"> \n                        <form onSubmit={submitHandler} className=\"shadow-lg\" encType='multipart/form-data'>\n                            <h1 className=\"mb-4\">Update User</h1>\n\n                            <div className=\"form-group\">\n                            <label htmlFor=\"name_field\">Name</label>\n                            <input\n                                type=\"text\"\n                                id=\"name_field\"\n                                className=\"form-control\"\n                                onChange={e => setName(e.target.value)}\n                                value={name}\n                            />\n                            </div>\n\n                            <div className=\"form-group\">\n                                <label htmlFor=\"price_field\">Email</label>\n                                <input\n                                type=\"text\"\n                                id=\"price_field\"\n                                className=\"form-control\"\n                                onChange={e => setEmail(e.target.value)}\n                                value={email}\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"category_field\">Role</label>\n                                <select disabled={user._id === authUser._id } value={role} onChange={e => setRole(e.target.value)} className=\"form-control\" id=\"category_field\">\n                                    <option value=\"admin\">Admin</option>\n                                    <option value=\"user\">User</option>\n                                </select>\n                            </div>\n                            <button\n                            id=\"login_button\"\n                            type=\"submit\"\n                            disabled={loading}\n                            className=\"btn btn-block py-3\"\n                            >\n                            UPDATE\n                            </button>\n\n                        </form>\n                    </div>\n                </Fragment>\n            </div>\n        </div>\n        \n    )\n}","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\admin\\ReviewList.js",["290"],[],"import { Fragment, useEffect, useState } from \"react\"\nimport { Button } from \"react-bootstrap\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { deleteReview, getReviews } from \"../../actions/productActions\"\nimport { clearError, clearReviewDeleted } from \"../../slices/productSlice\"\nimport Loader from '../layouts/Loader';\nimport { MDBDataTable} from 'mdbreact';\nimport {toast } from 'react-toastify'\nimport Sidebar from \"./Sidebar\"\n\nexport default function ReviewList() {\n    const { reviews = [], loading = true, error, isReviewDeleted }  = useSelector(state => state.productState)\n    const [productId, setProductId] = useState(\"\");\n    const dispatch = useDispatch();\n\n    const setReviews = () => {\n        const data = {\n            columns : [\n                {\n                    label: 'ID',\n                    field: 'id',\n                    sort: 'asc'\n                },\n                {\n                    label: 'Rating',\n                    field: 'rating',\n                    sort: 'asc'\n                },\n                {\n                    label: 'User',\n                    field: 'user',\n                    sort: 'asc'\n                },\n                {\n                    label: 'Comment',\n                    field: 'comment',\n                    sort: 'asc'\n                },\n                {\n                    label: 'Actions',\n                    field: 'actions',\n                    sort: 'asc'\n                }\n            ],\n            rows : []\n        }\n\n        reviews.forEach( review => {\n            data.rows.push({\n                id: review._id,\n                rating: review.rating,\n                user : review.user.name,\n                comment: review.comment ,\n                actions: (\n                    <Fragment>\n                        <Button onClick={e => deleteHandler(e, review._id)} className=\"btn btn-danger py-1 px-2 ml-2\">\n                            <i className=\"fa fa-trash\"></i>\n                        </Button>\n                    </Fragment>\n                )\n            })\n        })\n\n        return data;\n    }\n\n    const deleteHandler = (e, id) => {\n        e.target.disabled = true;\n        dispatch(deleteReview(productId, id))\n    }\n\n    const submitHandler = (e) =>{\n        e.preventDefault();\n        dispatch(getReviews(productId))\n    }\n\n    useEffect(() => {\n        if(error) {\n            toast(error, {\n                position: toast.POSITION.BOTTOM_CENTER,\n                type: 'error',\n                onOpen: ()=> { dispatch(clearError()) }\n            })\n            return\n        }\n        if(isReviewDeleted) {\n            toast('Review Deleted Succesfully!',{\n                type: 'success',\n                position: toast.POSITION.BOTTOM_CENTER,\n                onOpen: () => dispatch(clearReviewDeleted())\n            })\n            dispatch(getReviews(productId))\n            return;\n        }\n\n       \n    },[dispatch, error, isReviewDeleted])\n\n\n    return (\n        <div className=\"row\">\n        <div className=\"col-12 col-md-2\">\n                <Sidebar/>\n        </div>\n        <div className=\"col-12 col-md-10\">\n            <h1 className=\"my-4\">Review List</h1>\n            <div className=\"row justify-content-center mt-5\">\n                <div className=\"col-5\">\n                    <form onSubmit={submitHandler}>\n                        <div className=\"form-group\">\n                            <label >Product ID</label>\n                            <input \n                                type=\"text\"\n                                onChange= {e => setProductId(e.target.value)}\n                                value={productId}\n                                className=\"form-control\"\n                            />\n                        </div>\n                        <button type=\"submit\" disabled={loading} className=\"btn btn-primary btn-block py-2\">\n                            Search\n                        </button>\n                    </form>\n                </div>\n            </div>\n            <Fragment>\n                {loading ? <Loader/> : \n                    <MDBDataTable\n                        data={setReviews()}\n                        bordered\n                        striped\n                        hover\n                        className=\"px-3\"\n                    />\n                }\n            </Fragment>\n        </div>\n    </div>\n    )\n}","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\slices\\productSlice.js",["291","292","293","294"],[],"import { createSlice } from \"@reduxjs/toolkit\";\n\n\nconst productSlice = createSlice({\n    name: 'product',\n    initialState: {\n        loading: false,\n        product: {},\n        isReviewSubmitted: false,\n        isProductCreated: false,\n        isProductDeleted: false,\n        isProductUpdated: false,\n        isReviewDeleted: false,\n        reviews: []\n    },\n    reducers: {\n        productRequest(state, action){\n            return {\n                ...state,\n                loading: true\n            }\n        },\n        productSuccess(state, action){\n            return {\n                ...state,\n                loading: false,\n                product: action.payload.product\n            }\n        },\n        productFail(state, action){\n            return {\n                ...state,\n                loading: false,\n                error:  action.payload\n            }\n        },\n        createReviewRequest(state, action){\n            return {\n                ...state,\n                loading: true\n            }\n        },\n        createReviewSuccess(state, action){\n            return {\n                ...state,\n                loading: false,\n                isReviewSubmitted: true\n            }\n        },\n        createReviewFail(state, action){\n            return {\n                ...state,\n                loading: false,\n                error:  action.payload\n            }\n        },\n        clearReviewSubmitted(state, action) {\n            return {\n                ...state,\n                isReviewSubmitted: false\n            }\n        },\n        clearError(state, action) {\n           return{ ...state,\n            error: null\n           }\n        },\n        clearProduct(state, action) {\n            return{ ...state,\n                product : {}\n            }\n        },\n        newProductRequest(state, action){\n            return {\n                ...state,\n                loading: true\n            }\n        },\n        newProductSuccess(state, action){\n            return {\n                ...state,\n                loading: false,\n                product: action.payload.product,\n                isProductCreated: true\n            }\n        },\n        newProductFail(state, action){\n            return {\n                ...state,\n                loading: false,\n                error:  action.payload,\n                isProductCreated: false\n            }\n        },\n        clearProductCreated(state, action) {\n            return {\n                ...state,\n                isProductCreated: false\n            }\n        },\n         newProductRequest(state, action){\n            return {\n                ...state,\n                loading: true\n            }\n        },\n        newProductSuccess(state, action){\n            return {\n                ...state,\n                loading: false,\n                product: action.payload.product,\n                isProductCreated: true\n            }\n        },\n        newProductFail(state, action){\n            return {\n                ...state,\n                loading: false,\n                error:  action.payload,\n                isProductCreated: false\n            }\n        },\n        clearProductCreated(state, action) {\n            return {\n                ...state,\n                isProductCreated: false\n            }\n        },\n        deleteProductRequest(state, action){\n            return {\n                ...state,\n                loading: true\n            }\n        },\n        deleteProductSuccess(state, action){\n            return {\n                ...state,\n                loading: false,\n                isProductDeleted: true\n            }\n        },\n        deleteProductFail(state, action){\n            return {\n                ...state,\n                loading: false,\n                error:  action.payload,\n            }\n        },\n        clearProductDeleted(state, action) {\n            return {\n                ...state,\n                isProductDeleted: false\n            }\n        },\n\n        updateProductRequest(state, action){\n            return {\n                ...state,\n                loading: true\n            }\n        },\n        updateProductSuccess(state, action){\n            return {\n                ...state,\n                loading: false,\n                product: action.payload.product,\n                isProductUpdated: true\n            }\n        },\n        updateProductFail(state, action){\n            return {\n                ...state,\n                loading: false,\n                error:  action.payload,\n            }\n        },\n        clearProductUpdated(state, action) {\n            return {\n                ...state,\n                isProductUpdated: false\n            }\n        },\n\n        reviewsRequest(state, action){\n            return {\n                ...state,\n                loading: true\n            }\n        },\n        reviewsSuccess(state, action){\n            return {\n                ...state,\n                loading: false,\n                reviews: action.payload.reviews\n            }\n        },\n        reviewsFail(state, action){\n            return {\n                ...state,\n                loading: false,\n                error:  action.payload\n            }\n        },\n        deleteReviewRequest(state, action){\n            return {\n                ...state,\n                loading: true\n            }\n        },\n        deleteReviewSuccess(state, action){\n            return {\n                ...state,\n                loading: false,\n                isReviewDeleted: true\n            }\n        },\n        deleteReviewFail(state, action){\n            return {\n                ...state,\n                loading: false,\n                error:  action.payload,\n            }\n        },\n        clearReviewDeleted(state, action) {\n            return {\n                ...state,\n                isReviewDeleted: false\n            }\n        },\n\n    }\n});\n\nconst { actions, reducer } = productSlice;\n\nexport const { \n    productRequest, \n    productSuccess, \n    productFail,\n    createReviewFail,\n    createReviewRequest,\n    createReviewSuccess,\n    clearError,\n    clearReviewSubmitted,\n    clearProduct,\n    newProductFail,\n    newProductSuccess,\n    newProductRequest,\n    clearProductCreated,\n    deleteProductFail,\n    deleteProductRequest,\n    deleteProductSuccess,\n    clearProductDeleted,\n    updateProductFail,\n    updateProductRequest,\n    updateProductSuccess,\n    clearProductUpdated,\n    reviewsRequest,\n    reviewsFail,\n    reviewsSuccess,\n    deleteReviewFail,\n    deleteReviewRequest,\n    deleteReviewSuccess,\n    clearReviewDeleted\n} = actions;\n\nexport default reducer;\n\n","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\slices\\productsSlice.js",[],[],"C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\slices\\cartSlice.js",["295","296","297"],[],"import { createSlice } from \"@reduxjs/toolkit\";\n\n\n\nconst cartSlice = createSlice({\n    name: 'cart',\n    initialState: {\n        items: localStorage.getItem('cartItems')? JSON.parse(localStorage.getItem('cartItems')): [],\n        loading: false,\n        shippingInfo: localStorage.getItem('shippingInfo')? JSON.parse(localStorage.getItem('shippingInfo')): {}\n    },\n    reducers: {\n        addCartItemRequest(state, action){\n            return {\n                ...state,\n                loading: true\n            }\n        },\n        addCartItemSuccess(state, action){\n            const item = action.payload\n\n            const isItemExist = state.items.find( i => i.product == item.product);\n            \n            if(isItemExist) {\n                state = {\n                    ...state,\n                    loading: false,\n                }\n            }else{\n                state = {\n                    items: [...state.items, item],\n                    loading: false\n                }\n                \n                localStorage.setItem('cartItems', JSON.stringify(state.items));\n            }\n            return state\n            \n        },\n        increaseCartItemQty(state, action) {\n            state.items = state.items.map(item => {\n                if(item.product == action.payload) {\n                    item.quantity = item.quantity + 1\n                }\n                return item;\n            })\n            localStorage.setItem('cartItems', JSON.stringify(state.items));\n\n        },\n        decreaseCartItemQty(state, action) {\n            state.items = state.items.map(item => {\n                if(item.product == action.payload) {\n                    item.quantity = item.quantity - 1\n                }\n                return item;\n            })\n            localStorage.setItem('cartItems', JSON.stringify(state.items));\n\n        },\n        removeItemFromCart(state, action) {\n            const filterItems = state.items.filter(item => {\n                return item.product !== action.payload\n            })\n            localStorage.setItem('cartItems', JSON.stringify(filterItems));\n            return {\n                ...state,\n                items: filterItems\n            }\n        },\n        saveShippingInfo(state, action) {\n            localStorage.setItem('shippingInfo', JSON.stringify(action.payload));\n            return {\n                ...state,\n                shippingInfo: action.payload\n            }\n        },\n        orderCompleted(state, action) {\n            localStorage.removeItem('shippingInfo');\n            localStorage.removeItem('cartItems');\n            sessionStorage.removeItem('orderInfo');\n            return {\n                items: [],\n                loading: false,\n                shippingInfo: {}\n            }\n        }\n\n    }\n});\n\nconst { actions, reducer } = cartSlice;\n\nexport const { \n    addCartItemRequest, \n    addCartItemSuccess,\n    decreaseCartItemQty,\n    increaseCartItemQty,\n    removeItemFromCart,\n    saveShippingInfo,\n    orderCompleted\n } = actions;\n\nexport default reducer;\n\n","C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\slices\\authSlice.js",[],[],"C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\slices\\orderSlice.js",[],[],"C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\slices\\userSlice.js",[],[],"C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\layouts\\MetaData.js",[],[],"C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\actions\\productActions.js",[],[],"C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\product\\Product.js",[],[],"C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\layouts\\Loader.js",[],[],"C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\actions\\cartActions.js",[],[],"C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\layouts\\Search.js",[],[],"C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\product\\ProductReview.js",[],[],"C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\cart\\CheckoutStep.js",[],[],"C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\actions\\orderActions.js",[],[],"C:\\Users\\Babu\\MERN\\jvlcart-main\\frontend\\src\\components\\admin\\Sidebar.js",[],[],{"ruleId":"298","severity":1,"message":"299","line":35,"column":7,"nodeType":"300","endLine":35,"endColumn":51,"suggestions":"301"},{"ruleId":"302","severity":1,"message":"303","line":5,"column":9,"nodeType":"304","messageId":"305","endLine":5,"endColumn":23},{"ruleId":"306","severity":1,"message":"307","line":24,"column":26,"nodeType":"308","messageId":"309","endLine":24,"endColumn":28},{"ruleId":"306","severity":1,"message":"307","line":30,"column":32,"nodeType":"308","messageId":"309","endLine":30,"endColumn":34},{"ruleId":"298","severity":1,"message":"310","line":78,"column":7,"nodeType":"300","endLine":78,"endColumn":45,"suggestions":"311"},{"ruleId":"306","severity":1,"message":"307","line":120,"column":45,"nodeType":"308","messageId":"309","endLine":120,"endColumn":47},{"ruleId":"306","severity":1,"message":"307","line":13,"column":23,"nodeType":"308","messageId":"309","endLine":13,"endColumn":25},{"ruleId":"306","severity":1,"message":"307","line":18,"column":18,"nodeType":"308","messageId":"309","endLine":18,"endColumn":20},{"ruleId":"306","severity":1,"message":"307","line":29,"column":26,"nodeType":"308","messageId":"309","endLine":29,"endColumn":28},{"ruleId":"298","severity":1,"message":"312","line":32,"column":7,"nodeType":"300","endLine":32,"endColumn":9,"suggestions":"313"},{"ruleId":"298","severity":1,"message":"314","line":14,"column":7,"nodeType":"300","endLine":14,"endColumn":9,"suggestions":"315"},{"ruleId":"298","severity":1,"message":"316","line":62,"column":7,"nodeType":"300","endLine":62,"endColumn":9,"suggestions":"317"},{"ruleId":"298","severity":1,"message":"314","line":15,"column":7,"nodeType":"300","endLine":15,"endColumn":11,"suggestions":"318"},{"ruleId":"298","severity":1,"message":"314","line":37,"column":8,"nodeType":"300","endLine":37,"endColumn":10,"suggestions":"319"},{"ruleId":"306","severity":1,"message":"307","line":47,"column":38,"nodeType":"308","messageId":"309","endLine":47,"endColumn":40},{"ruleId":"298","severity":1,"message":"320","line":94,"column":8,"nodeType":"300","endLine":94,"endColumn":43,"suggestions":"321"},{"ruleId":"322","severity":1,"message":"323","line":191,"column":41,"nodeType":"324","endLine":198,"endColumn":43},{"ruleId":"298","severity":1,"message":"325","line":93,"column":7,"nodeType":"300","endLine":93,"endColumn":42,"suggestions":"326"},{"ruleId":"302","severity":1,"message":"327","line":38,"column":11,"nodeType":"304","messageId":"305","endLine":38,"endColumn":19},{"ruleId":"306","severity":1,"message":"307","line":49,"column":38,"nodeType":"308","messageId":"309","endLine":49,"endColumn":40},{"ruleId":"298","severity":1,"message":"328","line":106,"column":8,"nodeType":"300","endLine":106,"endColumn":43,"suggestions":"329"},{"ruleId":"322","severity":1,"message":"323","line":223,"column":41,"nodeType":"324","endLine":230,"endColumn":43},{"ruleId":"302","severity":1,"message":"327","line":20,"column":11,"nodeType":"304","messageId":"305","endLine":20,"endColumn":19},{"ruleId":"298","severity":1,"message":"330","line":51,"column":8,"nodeType":"300","endLine":51,"endColumn":41,"suggestions":"331"},{"ruleId":"302","severity":1,"message":"332","line":4,"column":10,"nodeType":"304","messageId":"305","endLine":4,"endColumn":21},{"ruleId":"298","severity":1,"message":"333","line":50,"column":8,"nodeType":"300","endLine":50,"endColumn":40,"suggestions":"334"},{"ruleId":"298","severity":1,"message":"328","line":97,"column":7,"nodeType":"300","endLine":97,"endColumn":41,"suggestions":"335"},{"ruleId":"336","severity":1,"message":"337","line":101,"column":10,"nodeType":"338","messageId":"309","endLine":101,"endColumn":27},{"ruleId":"336","severity":1,"message":"339","line":107,"column":9,"nodeType":"338","messageId":"309","endLine":107,"endColumn":26},{"ruleId":"336","severity":1,"message":"340","line":115,"column":9,"nodeType":"338","messageId":"309","endLine":115,"endColumn":23},{"ruleId":"336","severity":1,"message":"341","line":123,"column":9,"nodeType":"338","messageId":"309","endLine":123,"endColumn":28},{"ruleId":"306","severity":1,"message":"307","line":22,"column":66,"nodeType":"308","messageId":"309","endLine":22,"endColumn":68},{"ruleId":"306","severity":1,"message":"307","line":42,"column":33,"nodeType":"308","messageId":"309","endLine":42,"endColumn":35},{"ruleId":"306","severity":1,"message":"307","line":52,"column":33,"nodeType":"308","messageId":"309","endLine":52,"endColumn":35},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'redirect'. Either include it or remove the dependency array.","ArrayExpression",["342"],"no-unused-vars","'DropdownButton' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'product._id'. Either include it or remove the dependency array.",["343"],"React Hook useEffect has missing dependencies: 'navigate' and 'shippingInfo'. Either include them or remove the dependency array.",["344"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["345"],"React Hook useEffect has missing dependencies: 'dispatch', 'navigate', 'orderError', and 'shippingInfo'. Either include them or remove the dependency array.",["346"],["347"],["348"],"React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["349"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'productError'. Either include it or remove the dependency array.",["350"],"'navigate' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'productId'. Either include it or remove the dependency array.",["351"],"React Hook useEffect has a missing dependency: 'orderId'. Either include it or remove the dependency array.",["352"],"'useNavigate' is defined but never used.","React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.",["353"],["354"],"no-dupe-keys","Duplicate key 'newProductRequest'.","ObjectExpression","Duplicate key 'newProductSuccess'.","Duplicate key 'newProductFail'.","Duplicate key 'clearProductCreated'.",{"desc":"355","fix":"356"},{"desc":"357","fix":"358"},{"desc":"359","fix":"360"},{"desc":"361","fix":"362"},{"desc":"363","fix":"364"},{"desc":"365","fix":"366"},{"desc":"361","fix":"367"},{"desc":"368","fix":"369"},{"desc":"370","fix":"371"},{"desc":"372","fix":"373"},{"desc":"374","fix":"375"},{"desc":"376","fix":"377"},{"desc":"378","fix":"379"},"Update the dependencies array to be: [error, isAuthenticated, dispatch, navigate, redirect]",{"range":"380","text":"381"},"Update the dependencies array to be: [dispatch, id, isReviewSubmitted, error, product._id]",{"range":"382","text":"383"},"Update the dependencies array to be: [navigate, shippingInfo]",{"range":"384","text":"385"},"Update the dependencies array to be: [dispatch]",{"range":"386","text":"387"},"Update the dependencies array to be: [dispatch, navigate, orderError, shippingInfo]",{"range":"388","text":"389"},"Update the dependencies array to be: [dispatch, id]",{"range":"390","text":"391"},{"range":"392","text":"387"},"Update the dependencies array to be: [isProductCreated, error, dispatch, navigate]",{"range":"393","text":"394"},"Update the dependencies array to be: [dispatch, error, isProductDeleted, productError]",{"range":"395","text":"396"},"Update the dependencies array to be: [isProductUpdated, error, dispatch, productId]",{"range":"397","text":"398"},"Update the dependencies array to be: [isOrderUpdated, error, dispatch, orderId]",{"range":"399","text":"400"},"Update the dependencies array to be: [isUserUpdated, error, dispatch, userId]",{"range":"401","text":"402"},"Update the dependencies array to be: [dispatch, error, isReviewDeleted, productId]",{"range":"403","text":"404"},[1176,1220],"[error, isAuthenticated, dispatch, navigate, redirect]",[2628,2666],"[dispatch, id, isReviewSubmitted, error, product._id]",[1164,1166],"[navigate, shippingInfo]",[510,512],"[dispatch]",[2153,2155],"[dispatch, navigate, orderError, shippingInfo]",[734,738],"[dispatch, id]",[1149,1151],[2847,2882],"[isProductCreated, error, dispatch, navigate]",[3038,3073],"[dispatch, error, isProductDeleted, productError]",[3212,3247],"[isProductUpdated, error, dispatch, productId]",[1751,1784],"[isOrderUpdated, error, dispatch, orderId]",[1643,1675],"[isUserUpdated, error, dispatch, userId]",[2940,2974],"[dispatch, error, isReviewDeleted, productId]"]